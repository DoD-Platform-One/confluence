---
# Source: confluence/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: confluence
  labels:
    helm.sh/chart: confluence-0.1.0-bb.04
    app.kubernetes.io/name: confluence
    app.kubernetes.io/instance: confluence
    app.kubernetes.io/Appversion: "7.9.0-jdk11"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "collaboration"
    app.kubernetes.io/part-of: "bigbang"
    app.kubernetes.io/managed-by: "flux"
    app.kubernetes.io/bigbang-version: "0.1.0-bb.04"
---
# Source: confluence/templates/db-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: db-credentials
type: Opaque
data:
  PGUSER: Y29uZmx1ZW5jZV9hZG1pbg==
  PGPASSWORD: b2ZjMHVyc2VpdHNtNHR0c20wbQ==
---
# Source: confluence/templates/config-jvm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: confluence-jvm-config
  labels:
    helm.sh/chart: confluence-0.1.0-bb.04
    app.kubernetes.io/name: confluence
    app.kubernetes.io/instance: confluence
    app.kubernetes.io/Appversion: "7.9.0-jdk11"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "collaboration"
    app.kubernetes.io/part-of: "bigbang"
    app.kubernetes.io/managed-by: "flux"
    app.kubernetes.io/bigbang-version: "0.1.0-bb.04"
    
data:
  additional_jvm_args: >-
    -Dconfluence.cluster.hazelcast.listenPort=5701
    -Dsynchrony.btf.disabled=false
    -DConfluenceHomeLogAppender.disabled=true
  max_heap: 16184m
  min_heap: 1024m
  reserved_code_cache: 512m
---
# Source: confluence/templates/init-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: init-script
data:
  init-script.sh: "---\n\n#!/bin/bash\n\nchown 2002.2002 /var/atlassian/confluence-datacenter/\n
    \          \n# Get ips of cluster nodes from confluence service\nif [ -f ${CONFLUENCE_HOME}/confluence.cfg.xml
    ]; then\n  if [ -z \"${CLUSTER_PEER_IPS}\" ]; then\n    # This is a special case,
    where confluence is running in kubernetes, not on plain docker host.\n    KUBE_TOKEN=$(</var/run/secrets/kubernetes.io/serviceaccount/token)\n
    \   # Note: In the command below, \"this node\" will not show up in the service
    endpoints,\n    #       because it is still \"booting up\" and \"not ready\".\n
    \   CLUSTER_PEER_IPS=$(curl -sSk -H \"Authorization: Bearer $KUBE_TOKEN\" https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_PORT_443_TCP_PORT/api/v1/namespaces/${CONFLUENCE_NAMESPACE}/endpoints/${CONFLUENCE_SERVICE_NAME}
    | jq -r .subsets[].addresses[].ip | paste -sd \",\" -)\n\n  else\n    # This is
    a special case, which caters for confluence running on plain docker host instead
    of Kubernetes.\n    echo \"Using CLUSTER_PEER_IPS = ${CLUSTER_PEER_IPS} , as received
    by ENV variable.\"\n\n  fi\n\n  # Lets manage POD_IP first, as it will be used later.\n
    \ # So, POD_IP is being obtained through the helm chart.\n  # But, if the container
    is being run without Kubernetes, such as on plain docker host, then POD_IP will
    be empty.\n  # In that case, we need to find the IP of this pod/container ourselves,
    using 'ip addr'\n  if [ -z \"${POD_IP}\" ]; then\n    POD_IP=$(ip addr | egrep -w
    inet | egrep -e \"eth|ens\" | awk '{print $2}' | cut -d '/' -f1)\n  fi\n\n  if [
    -z \"${CLUSTER_PEER_IPS}\" ]; then\n    # if there are no peer IPs found, then we
    need to add at least the IP of this node in the cluster.peers file.\n    CLUSTER_PEER_IPS=${POD_IP}\n
    \ else\n    # append our IP to the peers list:\n    CLUSTER_PEER_IPS=\"${POD_IP},${CLUSTER_PEER_IPS}\"\n
    \ fi\n\n  echo \"Updating ${CONFLUENCE_HOME}/confluence.cfg.xml with PEER IPS: ${CLUSTER_PEER_IPS}
    ...\"\n  xmlstarlet edit -L -u \"//properties/property[@name='confluence.cluster.peers']\"
    \\\n    --value \"${CLUSTER_PEER_IPS}\" ${CONFLUENCE_HOME}/confluence.cfg.xml\nelse\n
    \ echo \"The file ${CONFLUENCE_HOME}/confluence.cfg.xml was not found; because,
    this may be the first node - still booting up.\"\nfi\n"
---
# Source: confluence/templates/server-xml-j2.configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: server-xml-j2
data:
  server.xml.j2: |
    <?xml version="1.0" encoding="utf-8"?>
  
    <Server port="{{ atl_tomcat_mgmt_port | default('8000') }}"
            shutdown="SHUTDOWN">
  
      <Listener className="org.apache.catalina.startup.VersionLoggerListener"/>
      <Listener className="org.apache.catalina.core.AprLifecycleListener"
                SSLEngine="on"/>
      <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener"/>
      <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener"/>
      <Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener"/>
  
      <Service name="Catalina">
  
        <Connector port="{{ atl_tomcat_port | default('8090') }}"
                   maxThreads="{{ atl_tomcat_maxthreads | default('100') }}"
                   minSpareThreads="{{ atl_tomcat_minsparethreads | default('10') }}"
                   connectionTimeout="{{ atl_tomcat_connectiontimeout | default('20000') }}"
                   enableLookups="{{ atl_tomcat_enablelookups | default('false') }}"
                   protocol="{{ atl_tomcat_protocol | default('HTTP/1.1') }}"
                   redirectPort="{{ atl_tomcat_redirectport | default('8443') }}"
                   acceptCount="{{ atl_tomcat_acceptcount | default('10') }}"
                   secure="{{ atl_tomcat_secure | default(catalina_connector_secure) | default('false') }}"
                   scheme="{{ atl_tomcat_scheme | default(catalina_connector_scheme) | default('http') }}"
                   proxyName="{{ atl_proxy_name | default(catalina_connector_proxyname) | default('') }}"
                   proxyPort="{{ atl_proxy_port | default(catalina_connector_proxyport) | default('') }}"
                   maxConnections="{{ atl_tomcat_maxconnections | default('10000') }}"
                   acceptorThreadCount="{{ atl_tomcat_acceptorthreadcount | default('10') }}"
  
                   relaxedPathChars="[]|"
                   relaxedQueryChars="[]|{}^\`&quot;&lt;&gt;"
                   bindOnInit="false"
                   maxHttpHeaderSize="{{ atl_tomcat_maxhttpheadersize | default('8192') }}"
                   useBodyEncodingForURI="true"
                   disableUploadTimeout="true" />
  
        <Connector port="8081"
                   maxThreads="100"
                   minSpareThreads="10"
                   connectionTimeout="20000"
                   enableLookups="false"
                   protocol="HTTP/1.1"
                   redirectPort="8443"
                   acceptCount="10"
                   maxConnections="10000"
                   acceptorThreadCount="10"
  
                   relaxedPathChars="[]|"
                   relaxedQueryChars="[]|{}^\`&quot;&lt;&gt;"
                   bindOnInit="false"
                   maxHttpHeaderSize="8192"
                   useBodyEncodingForURI="false"
                   disableUploadTimeout="true" />
  
        <Engine name="Standalone"
                defaultHost="localhost"
                debug="0">
          <Host name="localhost"
                debug="0"
                appBase="webapps"
                unpackWARs="true"
                autoDeploy="false"
                startStopThreads="4">
            <Context path="{{ atl_tomcat_contextpath | default(catalina_context_path) | default('') }}"
                     docBase="../confluence"
                     debug="0"
                     reloadable="false"
                     useHttpOnly="true">
              <!-- Logging configuration for Confluence is specified in confluence/WEB-INF/classes/log4j.properties -->
              <Manager pathname=""/>
              <Valve className="org.apache.catalina.valves.StuckThreadDetectionValve"
                     threshold="60"/>
            {% if atl_tomcat_access_log == 'true' %}
              <Valve className="org.apache.catalina.valves.AccessLogValve"
                     requestAttributesEnabled="true"
                     directory="logs"
                     prefix="confluence_access"
                     suffix=".log"
                     rotatable="true"
                     pattern="%h %{X-AUSERNAME}o %t &quot;%r&quot; %s %b %D %U %I &quot;%{User-Agent}i&quot;" />
              <Valve className="org.apache.catalina.valves.RemoteIpValve"
                     proxiesHeader="x-forwarded-by"
                     internalProxies="{{ atl_tomcat_proxy_internal_ips | default('') }}"
                     remoteIpHeader="x-forwarded-for"
                     protocolHeader="x-forwarded-proto"
                     requestAttributesEnabled="true"
                     resolveHosts="false" />
            {% endif %}
            </Context>
  
            <Context path="${confluence.context.path}/synchrony-proxy"
                     docBase="../synchrony-proxy"
                     debug="0"
                     reloadable="false"
                     useHttpOnly="true">
              <Valve className="org.apache.catalina.valves.StuckThreadDetectionValve"
                     threshold="60"/>
            </Context>
  
          </Host>
        </Engine>
  
      </Service>
  
    </Server>
---
# Source: confluence/templates/server-xml.configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: server-xml
data:
  server.xml: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<!-- Note: this file is
    volume mounted and not templated -->\n\n<Server port=\"8000\"\n        shutdown=\"SHUTDOWN\">\n\n
    \ <Listener className=\"org.apache.catalina.startup.VersionLoggerListener\"/>\n
    \ <Listener className=\"org.apache.catalina.core.AprLifecycleListener\"\n            SSLEngine=\"on\"/>\n
    \ <Listener className=\"org.apache.catalina.core.JreMemoryLeakPreventionListener\"/>\n
    \ <Listener className=\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\"/>\n
    \ <Listener className=\"org.apache.catalina.core.ThreadLocalLeakPreventionListener\"/>\n\n
    \ <Service name=\"Catalina\">\n\n    <Connector port=\"8090\"\n               maxThreads=\"100\"\n
    \              minSpareThreads=\"10\"\n               connectionTimeout=\"20000\"\n
    \              enableLookups=\"false\"\n               protocol=\"HTTP/1.1\"\n               redirectPort=\"8443\"\n
    \              acceptCount=\"10\"\n               secure=\"true\"\n               scheme=\"https\"\n
    \              proxyName= confluence.dev.dsop.io\n               proxyPort=\"443\"\n
    \              maxConnections=\"10000\"\n               acceptorThreadCount=\"10\"\n\n
    \              relaxedPathChars=\"[]|\"\n               relaxedQueryChars=\"[]|{}^\\`&quot;&lt;&gt;\"\n
    \              bindOnInit=\"false\"\n               maxHttpHeaderSize=\"8192\"\n
    \              useBodyEncodingForURI=\"true\"\n               disableUploadTimeout=\"true\"
    />\n\n    <Connector port=\"8081\"\n               maxThreads=\"100\"\n               minSpareThreads=\"10\"\n
    \              connectionTimeout=\"20000\"\n               enableLookups=\"false\"\n
    \              protocol=\"HTTP/1.1\"\n               redirectPort=\"8443\"\n               acceptCount=\"10\"\n
    \              maxConnections=\"10000\"\n               acceptorThreadCount=\"10\"\n\n
    \              relaxedPathChars=\"[]|\"\n               relaxedQueryChars=\"[]|{}^\\`&quot;&lt;&gt;\"\n
    \              bindOnInit=\"false\"\n               maxHttpHeaderSize=\"8192\"\n
    \              useBodyEncodingForURI=\"false\"\n               disableUploadTimeout=\"true\"
    />\n\n    <Engine name=\"Standalone\"\n            defaultHost=\"localhost\"\n            debug=\"0\">\n
    \     <Host name=\"localhost\"\n            debug=\"0\"\n            appBase=\"webapps\"\n
    \           unpackWARs=\"true\"\n            autoDeploy=\"false\"\n            startStopThreads=\"4\">\n
    \       <Context path=\"\"\n                 docBase=\"../confluence\"\n                 debug=\"0\"\n
    \                reloadable=\"false\"\n                 useHttpOnly=\"true\">\n
    \         <!-- Logging configuration for Confluence is specified in confluence/WEB-INF/classes/log4j.properties
    -->\n          <Manager pathname=\"\"/>\n          <Valve className=\"org.apache.catalina.valves.StuckThreadDetectionValve\"\n
    \                threshold=\"60\"/>\n        \n        </Context>\n\n        <Context
    path=\"${confluence.context.path}/synchrony-proxy\"\n                 docBase=\"../synchrony-proxy\"\n
    \                debug=\"0\"\n                 reloadable=\"false\"\n                 useHttpOnly=\"true\">\n
    \         <Valve className=\"org.apache.catalina.valves.StuckThreadDetectionValve\"\n
    \                threshold=\"60\"/>\n        </Context>\n\n      </Host>\n    </Engine>\n\n
    \ </Service>\n\n</Server>\n"
---
# Source: confluence/templates/shared-home-pv.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: confluence-shared-home-pv
  labels:
    helm.sh/chart: confluence-0.1.0-bb.04
    app.kubernetes.io/name: confluence
    app.kubernetes.io/instance: confluence
    app.kubernetes.io/Appversion: "7.9.0-jdk11"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "collaboration"
    app.kubernetes.io/part-of: "bigbang"
    app.kubernetes.io/managed-by: "flux"
    app.kubernetes.io/bigbang-version: "0.1.0-bb.04"
    
spec:
  capacity:
    storage: 5Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: efs-sc
  claimRef:
    name: confluence-shared-home
    namespace: default
  csi:
    driver: efs.csi.aws.com
    volumeHandle: fs-5c3f3d5d
---
# Source: confluence/templates/shared-home-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: confluence-shared-home
  labels:
    helm.sh/chart: confluence-0.1.0-bb.04
    app.kubernetes.io/name: confluence
    app.kubernetes.io/instance: confluence
    app.kubernetes.io/Appversion: "7.9.0-jdk11"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "collaboration"
    app.kubernetes.io/part-of: "bigbang"
    app.kubernetes.io/managed-by: "flux"
    app.kubernetes.io/bigbang-version: "0.1.0-bb.04"
    
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: "efs-sc"
  resources:
    requests:
      storage: 5Gi
---
# Source: confluence/templates/service.yaml
apiVersion: v1
apiVersion: v1
kind: Service
metadata:
  name: confluence
  labels:
    helm.sh/chart: confluence-0.1.0-bb.04
    app.kubernetes.io/name: confluence
    app.kubernetes.io/instance: confluence
    app.kubernetes.io/Appversion: "7.9.0-jdk11"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "collaboration"
    app.kubernetes.io/part-of: "bigbang"
    app.kubernetes.io/managed-by: "flux"
    app.kubernetes.io/bigbang-version: "0.1.0-bb.04"
    
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
    - port: 5701
      targetPort: hazelcast
      protocol: TCP
      name: hazelcast
    - port: 8888
      targetPort: intconnector
      protocol: TCP
      name: intconnector
    - port: 8081
      targetPort: intersvc
      protocol: TCP
      name: intersvc
    - port: 8091
      targetPort: synchrony
      protocol: TCP
      name: synchrony
  selector:
    app.kubernetes.io/name: confluence
    app.kubernetes.io/instance: confluence
---
# Source: confluence/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: confluence
  labels:
    helm.sh/chart: confluence-0.1.0-bb.04
    app.kubernetes.io/name: confluence
    app.kubernetes.io/instance: confluence
    app.kubernetes.io/Appversion: "7.9.0-jdk11"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "collaboration"
    app.kubernetes.io/part-of: "bigbang"
    app.kubernetes.io/managed-by: "flux"
    app.kubernetes.io/bigbang-version: "0.1.0-bb.04"
    
spec:
  replicas: 1
  serviceName: confluence
  selector:
    matchLabels:
      app.kubernetes.io/name: confluence
      app.kubernetes.io/instance: confluence
  template:
    metadata:
      labels:
        app.kubernetes.io/name: confluence
        app.kubernetes.io/instance: confluence
    spec:
      serviceAccountName: confluence
      terminationGracePeriodSeconds: 1
      securityContext:
        # This is intended to ensure that the shared-home volume is group-writeable by the GID used by the Cnfluence container.
        # However, this doesn't appear to work for NFS volumes due to a K8s bug: https://github.com/kubernetes/examples/issues/260
        fsGroup: 2002
      initContainers:
        - command:
          - /bin/bash
          - -c
          - /tmp/init-script.sh
          env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: CONFLUENCE_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: CONFLUENCE_SERVICE_NAME
            value: confluence
          - name: CONFLUENCE_HOME
            value: /var/atlassian/application-data/confluence
          image: registry.dso.mil/platform-one/apps/confluence/alpine:confluence-1.0
          imagePullPolicy: Always
          name: configure
          volumeMounts:
          - mountPath: /var/atlassian/application-data/confluence/
            name: local-home
          - mountPath: /var/atlassian/confluence-datacenter/
            name: shared-home
          - mountPath: /tmp
            name: init-script
      imagePullSecrets:
        - name: private-registry
      containers:
        - name: confluence
          image: registry.dso.mil/platform-one/big-bang/apps/third-party/confluence/confluence-server:7.4.8
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 2002
            runAsGroup: 2002
          ports:
            - name: http
              containerPort: 8090
              protocol: TCP
            - name: hazelcast
              containerPort: 5701
              protocol: TCP
            - name: intersvc
              containerPort: 8081
              protocol: TCP
            - name: synchrony
              containerPort: 8091
              protocol: TCP
          readinessProbe:
            httpGet:
              port: 8090
              path: /status
            initialDelaySeconds: 10
            periodSeconds: 5
            failureThreshold: 30
          resources:
            limits:
              cpu: "2"
              memory: 25G
            requests:
              cpu: 500m
              memory: 19G
          volumeMounts:
            - name: local-home
              mountPath: "/var/atlassian/application-data/confluence"
            - name: shared-home
              mountPath: "/var/atlassian/confluence-datacenter"
            - mountPath: /opt/atlassian/etc/server.xml.j2
              name: server-xml-j2
              subPath: server.xml.j2
            - mountPath: /opt/atlassian/confluence/conf/server.xml
              name: server-xml
              subPath: server.xml
            
            
          env:
            
            - name: ATL_TOMCAT_SCHEME
              value: "https"
            - name: ATL_TOMCAT_SECURE
              value: "true"
            
            - name: ATL_PRODUCT_HOME_SHARED
              value: "/var/atlassian/confluence-datacenter"
            - name: JVM_SUPPORT_RECOMMENDED_ARGS
              valueFrom:
                configMapKeyRef:
                  key: additional_jvm_args
                  name: confluence-jvm-config
            
            
            
            - name: ATL_DB_TYPE
              value: "postgresql"
            
            
            - name: ATL_JDBC_URL
              value: "jdbc:postgresql://confluence-db.dev.dsop.io:5432/confluence"
            
            
            - name: ATL_JDBC_USER
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: PGUSER
            - name: ATL_JDBC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: PGPASSWORD
            
            
            
            - name: JVM_MINIMUM_MEMORY
              valueFrom:
                configMapKeyRef:
                  key: min_heap
                  name: confluence-jvm-config
            - name: JVM_MAXIMUM_MEMORY
              valueFrom:
                configMapKeyRef:
                  key: max_heap
                  name: confluence-jvm-config
            - name: JVM_RESERVED_CODE_CACHE_SIZE
              valueFrom:
                configMapKeyRef:
                  key: reserved_code_cache
                  name: confluence-jvm-config
            - name: CATALINA_OPTS
              value: -Dfile.encoding=UTF-8 -Dconfluence.cluster.node.name=$(hostname)
            - name: ATL_PROXY_NAME
              value: confluence.dev.dsop.io
            - name: ATL_PROXY_PORT
              value: "443"
            - name: CONFLUENCE_HOME
              value: /var/atlassian/application-data/confluence/
            - name: ATL_JDBC_URL
              value: jdbc:postgresql://db-dev.admin.dso.mil:5432/confluence
      nodeSelector:
        category: memory
      tolerations:
        - effect: NoSchedule
          key: MemoryOnly
          operator: Equal
          value: "true"
      volumes:
        
        
        - name: shared-home
          persistentVolumeClaim:
            claimName: confluence-shared-home
        
        - configMap:
            defaultMode: 484
            name: server-xml-j2
          name: server-xml-j2
        - configMap:
            defaultMode: 484
            name: server-xml
          name: server-xml
        - configMap:
            defaultMode: 484
            name: init-script
          name: init-script

  
  
  volumeClaimTemplates:
  - metadata:
      name: local-home
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "ebs"
      resources:
        requests:
          storage: 50Gi
---
# Source: confluence/templates/bigbang/destinationrule.yaml
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: confluence-sticky
  labels:
    helm.sh/chart: confluence-0.1.0-bb.04
    app.kubernetes.io/name: confluence
    app.kubernetes.io/instance: confluence
    app.kubernetes.io/Appversion: "7.9.0-jdk11"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "collaboration"
    app.kubernetes.io/part-of: "bigbang"
    app.kubernetes.io/managed-by: "flux"
    app.kubernetes.io/bigbang-version: "0.1.0-bb.04"
    
spec:
  host: confluence.default.svc.cluster.local
  trafficPolicy:
    loadBalancer:
      consistentHash:
        httpCookie:
          # set a new session cookie with istio per atlassian guidelines: https://confluence.atlassian.com/enterprise/confluence-data-center-load-balancer-examples-781200827.html
          # note: this cookie is explicitly different than JSESSIONID, let confluence handle that
          name: CONFLUENCECONSISTENTHASH
          path: /
          ttl: 300m
---
# Source: confluence/templates/bigbang/virtualservice.yaml
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: confluence
  labels:
    helm.sh/chart: confluence-0.1.0-bb.04
    app.kubernetes.io/name: confluence
    app.kubernetes.io/instance: confluence
    app.kubernetes.io/Appversion: "7.9.0-jdk11"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "collaboration"
    app.kubernetes.io/part-of: "bigbang"
    app.kubernetes.io/managed-by: "flux"
    app.kubernetes.io/bigbang-version: "0.1.0-bb.04"
    
spec:
  hosts:
  - confluence.bigbang.dev
  gateways:
  - istio-system/main
  http:
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        host: confluence.default.svc.cluster.local
        port:
          number: 80
      headers:
        request:
          remove:
            - x-b3-sampled
          add:
            x-b3-sampled: '0'
---
# Source: confluence/templates/tests/test-application-status.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "confluence-application-status-test"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
  labels:
    helm.sh/chart: confluence-0.1.0-bb.04
    app.kubernetes.io/name: confluence
    app.kubernetes.io/instance: confluence
    app.kubernetes.io/Appversion: "7.9.0-jdk11"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "collaboration"
    app.kubernetes.io/part-of: "bigbang"
    app.kubernetes.io/managed-by: "flux"
    app.kubernetes.io/bigbang-version: "0.1.0-bb.04"
    
spec:
  containers:
    - name: test
      image: alpine
      env:
        - name: STATUS_URL
          value: "http://confluence:80/status"
      command:
        - /bin/sh
        - -ec
        - |
          apk add -q jq curl
          STATUS=$(curl -s "$STATUS_URL")
          echo "Verifying application state is RUNNING or FIRST_RUN: $STATUS"
          echo $STATUS | jq -e '.state|test("RUNNING|FIRST_RUN")'
  restartPolicy: Never
---
# Source: confluence/templates/tests/test-database-connectivity.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "confluence-db-connectivity-test"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
  labels:
    helm.sh/chart: confluence-0.1.0-bb.04
    app.kubernetes.io/name: confluence
    app.kubernetes.io/instance: confluence
    app.kubernetes.io/Appversion: "7.9.0-jdk11"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "collaboration"
    app.kubernetes.io/part-of: "bigbang"
    app.kubernetes.io/managed-by: "flux"
    app.kubernetes.io/bigbang-version: "0.1.0-bb.04"
    
spec:
  serviceAccountName: confluence
  containers:
    - name: test
      image: "registry.dso.mil/platform-one/big-bang/apps/third-party/confluence/confluence-server:7.4.8:7.9.0-jdk11"
      imagePullPolicy: IfNotPresent
      env:
        - name: JDBC_TYPE
          value: "postgresql"
        - name: JDBC_URL
          value: "jdbc:postgresql://confluence-db.dev.dsop.io:5432/confluence"
        - name: JDBC_USER
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: PGUSER
        - name: JDBC_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: PGPASSWORD
        - name: CLASSPATH
          value: "/opt/atlassian/confluence/confluence/WEB-INF/lib/*"
      command:
        - /bin/bash
        - -ec
        - |
          cat <<EOF | jshell - > output.txt
          var jdbcUrl = System.getenv("JDBC_URL");
          var jdbcUsername = System.getenv("JDBC_USER");
          var jdbcPassword = System.getenv("JDBC_PASSWORD");

          System.out.println("Establishing connection to " + jdbcUrl);
          try (var c = java.sql.DriverManager.getConnection(jdbcUrl, jdbcUsername, jdbcPassword)) {
             System.out.println("Connection established OK, " + c.getClass());
          }
          EOF
          cat output.txt
          grep -q "Connection established OK" output.txt
  restartPolicy: Never
---
# Source: confluence/templates/tests/test-shared-home-permissions.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "confluence-shared-home-permissions-test"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
  labels:
    helm.sh/chart: confluence-0.1.0-bb.04
    app.kubernetes.io/name: confluence
    app.kubernetes.io/instance: confluence
    app.kubernetes.io/Appversion: "7.9.0-jdk11"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "collaboration"
    app.kubernetes.io/part-of: "bigbang"
    app.kubernetes.io/managed-by: "flux"
    app.kubernetes.io/bigbang-version: "0.1.0-bb.04"
    
spec:
  containers:
    - name: test
      image: debian:stable-slim
      imagePullPolicy: IfNotPresent
      securityContext:
        # Slightly dodgy; we assume that the UID and GID used by the product images are the same, which in practice they are
        runAsUser: 2002
        runAsGroup: 2002
      volumeMounts:
        - name: shared-home
          mountPath: /shared-home
      command:
        - /bin/sh
        - -ec
        - |
          ls -ld /shared-home
          echo "Creating temporary file in shared home as user $(id -u):$(id -g)"
          touch /shared-home/permissions-test
          ls -l /shared-home/permissions-test
          rm /shared-home/permissions-test
  volumes:
    
    - name: shared-home
      persistentVolumeClaim:
        claimName: confluence-shared-home
    
  restartPolicy: Never
